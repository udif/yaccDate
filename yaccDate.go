// Code generated by goyacc -o yaccDate.go yaccDate.y. DO NOT EDIT.

//line yaccDate.y:12

package yaccDate

import __yyfmt__ "fmt"

//line yaccDate.y:15

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode"
)

//line yaccDate.y:29
type yySymType struct {
	yys int
	// 0 - sec
	// 1 - min
	// 2 - hour
	// 3 - day
	// 4 - month
	// 5 - year
	// 6 - timezone offset (seconds)
	ival int
	arr  [7]int
}

const NUM2 = 57346
const NUM4 = 57347
const WEEKDAY = 57348
const MONTH = 57349
const TIMEZONE = 57350
const UNKNOWN = 57351

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUM2",
	"NUM4",
	"WEEKDAY",
	"MONTH",
	"TIMEZONE",
	"'+'",
	"'-'",
	"':'",
	"UNKNOWN",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yaccDate.y:131

var weekDays = map[string]int{
	"sun": 0,
	"mon": 1,
	"tue": 2,
	"wed": 3,
	"thu": 4,
	"fri": 5,
	"sat": 6,
	// Add more week days as needed
}

var monthNames = map[string]time.Month{
	"jan": time.January,
	"feb": time.February,
	"mar": time.March,
	"apr": time.April,
	"may": time.May,
	"jun": time.June,
	"jul": time.July,
	"aug": time.August,
	"sep": time.September,
	"oct": time.October,
	"nov": time.November,
	"dec": time.December,
	// Add more month names as needed
}

var timeZones = map[string]int{
	"PST": -8 * 60 * 60,
	"PDT": -7 * 60 * 60,
	"EST": -5 * 60 * 60,
	"EDT": -4 * 60 * 60,
	"CST": -6 * 60 * 60,
	"CDT": -5 * 60 * 60,
	"MST": -7 * 60 * 60,
	"MDT": -6 * 60 * 60,
	"UTC": 0,
	"UT":  0,
	"GMT": 0,
	// Add more time zones as needed
}

type Lexer struct {
	result  [7]int
	scanner *bufio.Scanner
}

func NewLexer(input string) *Lexer {
	scanner := bufio.NewScanner(strings.NewReader(input))
	scanner.Split(customSplit)
	return &Lexer{scanner: scanner}
}

func customSplit(data []byte, atEOF bool) (advance int, token []byte, err error) {
	// Skip leading spaces or commas.
	start := 0
	for ; start < len(data); start++ {
		if !unicode.IsSpace(rune(data[start])) && data[start] != ',' {
			break
		}
	}
	// Scan until space, comma, or symbol, marking end of word.
	// If we see a letter, consume as a symbol.
	if start >= len(data) {
		// Request more data.
		return start, nil, nil
	}
	if unicode.IsLetter(rune(data[start])) {
		for j := start + 1; j < len(data); j++ {
			if !unicode.IsLetter(rune(data[j])) {
				fmt.Println(j, data[start:j])
				return j, data[start:j], nil
			}
		}
	} else if unicode.IsDigit(rune(data[start])) {
		// If we see a digit, consume as a number.
		for j := start + 1; j < len(data); j++ {
			if !unicode.IsDigit(rune(data[j])) {
				fmt.Println(j, data[start:j])
				return j, data[start:j], nil
			}
		}
	} else {
		// Otherwise, consume as a single rune.
		fmt.Println(start+1, data[start])
		return start + 1, data[start : start+1], nil
	}
	// Return the remaining bytes if we're at EOF.
	if atEOF && len(data) > start {
		return len(data), data[start:], nil
	}

	// Request more data.
	return start, nil, nil
}

func (l *Lexer) Lex(lval *yaccDateSymType) int {
	var err error
	if !l.scanner.Scan() {
		return 0
	}
	token := l.scanner.Text()
	le := len(token)

	// Check for one or two digit integer numbers
	if le <= 2 && unicode.IsDigit(rune(token[0])) && (le == 1 || unicode.IsDigit(rune(token[1]))) {
		lval.ival, err = strconv.Atoi(token)
		if err != nil {
			return UNKNOWN
		}
		return NUM2
	}

	// Check for four digit integers
	if len(token) == 4 && unicode.IsDigit(rune(token[0])) && unicode.IsDigit(rune(token[1])) && unicode.IsDigit(rune(token[2])) && unicode.IsDigit(rune(token[3])) {
		lval.ival, err = strconv.Atoi(token)
		if err != nil {
			return UNKNOWN
		}
		return NUM4
	}

	// Check for week days
	if day, ok := weekDays[strings.ToLower(token)]; ok {
		lval.ival = day
		return WEEKDAY
	}

	// Check for month names
	if month, ok := monthNames[strings.ToLower(token)]; ok {
		lval.ival = int(month)
		return MONTH
	}

	// Check for time zones
	if offset, ok := timeZones[strings.ToUpper(token)]; ok {
		lval.ival = offset
		return TIMEZONE
	}

	// Return other symbols as individual tokens
	if len(token) == 1 {
		if rune(token[0]) == '+' {
			return '+'
		}
		if rune(token[0]) == '-' {
			return '-'
		}
		if rune(token[0]) == ':' {
			return ':'
		}
	}
	return UNKNOWN
}

func (l *Lexer) Error(e string) {
	fmt.Printf("Error: %s\n", e)
}

func flexDateToTime(dateStr string) time.Time {
	lexer := NewLexer(dateStr)
	if yaccDateParse(lexer) == 1 {
		log.Fatal("Cannot parse date:", dateStr)
		os.Exit(1)
	}
	myzone := time.FixedZone("my_time_zone", lexer.result[6])
	return time.Date(lexer.result[5], time.Month(lexer.result[4]), lexer.result[3], lexer.result[2], lexer.result[1], lexer.result[0], 0, myzone)
}

//func main() {
//	yaccDateDebug = 1
//	reader := bufio.NewReader(os.Stdin)
//	for {
//		fmt.Print("Enter text: ")
//		text, _ := reader.ReadString('\n')
//		lexer := NewLexer(text)
//		fmt.Println(yaccDateParse(lexer), lexer.result)
//	}
//}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 42

var yyAct = [...]int8{
	28, 21, 23, 36, 31, 22, 26, 34, 20, 11,
	14, 15, 23, 39, 9, 22, 6, 29, 30, 24,
	25, 5, 27, 35, 33, 19, 16, 9, 4, 10,
	12, 13, 18, 32, 38, 37, 8, 17, 7, 3,
	2, 1,
}

var yyPact = [...]int16{
	10, -1000, -1000, 1, 23, -1000, -1000, 21, -2, -1000,
	-1000, -1000, -1000, 15, -1000, -1000, -1000, -1000, -5, -1000,
	8, 13, -1000, -1000, -7, -1000, 20, -3, -1000, -1000,
	-1000, 19, -8, -1000, 13, -1000, 9, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 41, 40, 39, 21, 38, 37, 0, 1, 36,
	34, 33, 32, 31, 30, 29, 28,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 4, 15, 15, 14,
	14, 14, 13, 13, 16, 6, 12, 11, 10, 5,
	5, 9, 8, 8, 7, 7,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	2, 4, 1, 1, 1, 5, 1, 1, 1, 5,
	3, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -16, -4, 6, -5, -9, 4,
	-15, 8, -14, -13, 9, 10, -4, -6, -12, 4,
	10, -8, 7, 4, 4, 5, 11, -8, -7, 4,
	5, 11, -11, 4, 10, 4, 11, -7, -10, 4,
}

var yyDef = [...]int8{
	0, -2, 1, 3, 0, 5, 14, 0, 0, 21,
	2, 7, 8, 0, 12, 13, 4, 6, 0, 16,
	0, 0, 22, 23, 9, 10, 0, 0, 20, 24,
	25, 0, 0, 17, 0, 11, 0, 19, 15, 18,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 3, 10, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 11,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 12,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:50
		{
			yaccDatelex.(*Lexer).result = yyVAL.arr
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yaccDate.y:56
		{
			yyVAL.arr = yyDollar[1].arr
			yyVAL.arr[6] = yyDollar[2].ival
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:60
		{
			yyVAL.arr = yyDollar[1].arr
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yaccDate.y:63
		{
			yyVAL.arr = yyDollar[2].arr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:64
		{
			yyVAL.arr = yyDollar[1].arr
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yaccDate.y:68
		{
			yyVAL.arr[0] = yyDollar[2].arr[0]
			yyVAL.arr[1] = yyDollar[2].arr[1]
			yyVAL.arr[2] = yyDollar[2].arr[2]
			yyVAL.arr[3] = yyDollar[1].arr[3]
			yyVAL.arr[4] = yyDollar[1].arr[4]
			yyVAL.arr[5] = yyDollar[1].arr[5]
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:78
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:79
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yaccDate.y:82
		{
			yyVAL.ival = yyDollar[1].ival * yyDollar[2].ival * 3600
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yaccDate.y:83
		{
			yyVAL.ival = yyDollar[1].ival*((yyDollar[2].ival/100)*3600) + (yyDollar[2].ival%100)*60
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yaccDate.y:84
		{
			yyVAL.ival = yyDollar[1].ival * (yyDollar[2].ival*3600 + yyDollar[4].ival*60)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:87
		{
			yyVAL.ival = 1
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:88
		{
			yyVAL.ival = -1
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yaccDate.y:95
		{
			yyVAL.arr[0] = yyDollar[5].ival
			yyVAL.arr[1] = yyDollar[3].ival
			yyVAL.arr[2] = yyDollar[1].ival
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:102
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:103
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:104
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yaccDate.y:108
		{
			yyVAL.arr[5] = yyDollar[5].ival
			yyVAL.arr[4] = yyDollar[3].ival
			yyVAL.arr[3] = yyDollar[1].ival
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yaccDate.y:114
		{
			yyVAL.arr[5] = yyDollar[3].ival
			yyVAL.arr[4] = yyDollar[2].ival
			yyVAL.arr[3] = yyDollar[1].ival
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:121
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:124
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:125
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:128
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yaccDate.y:129
		{
			yyVAL.ival = yyDollar[1].ival
		}
	}
	goto yystack /* stack new state and value */
}
