// Code generated by goyacc -p yaccDate -o yaccDate.go yaccDate.y. DO NOT EDIT.

//line yaccDate.y:12

package yaccDate

import __yyfmt__ "fmt"

//line yaccDate.y:15

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"github.com/tkuchiki/go-timezone"
	"strconv"
	"strings"
	"time"
	"unicode"
)

type timeDateInfo struct {
	sec, min, hour   int
	day, month, year int
	offset           int
	tz               []*timezone.TzAbbreviationInfo // 3-letter timezone converted
	tz3              string                         // if 3-letter timezone
	mime             string                         // if MIME string
	offset_1st       bool                           // true if offset appeared first
}

//line yaccDate.y:40
type yaccDateSymType struct {
	yys int
	// 0 - sec
	// 1 - min
	// 2 - hour
	// 3 - day
	// 4 - month
	// 5 - year
	// 6 - timezone offset (seconds)
	ival int
	tdi  timeDateInfo
}

const NUM2 = 57346
const NUM4 = 57347
const WEEKDAY = 57348
const MONTH = 57349
const TIMEZONE = 57350
const TIMEZONE0 = 57351
const UNKNOWN = 57352
const MIME = 57353

var yaccDateToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUM2",
	"NUM4",
	"WEEKDAY",
	"MONTH",
	"TIMEZONE",
	"TIMEZONE0",
	"UNKNOWN",
	"MIME",
	"'+'",
	"'-'",
	"':'",
	"'('",
	"')'",
	"'/'",
	"'='",
}

var yaccDateStatenames = [...]string{}

const yaccDateEofCode = 1
const yaccDateErrCode = 2
const yaccDateInitialStackSize = 16

//line yaccDate.y:185

var weekDays = map[string]int{
	"sun": 0,
	"mon": 1,
	"tue": 2,
	"wed": 3,
	"thu": 4,
	"fri": 5,
	"sat": 6,
	// Add more week days as needed
}

var monthNames = map[string]time.Month{
	"jan": time.January,
	"feb": time.February,
	"mar": time.March,
	"apr": time.April,
	"may": time.May,
	"jun": time.June,
	"jul": time.July,
	"aug": time.August,
	"sep": time.September,
	"oct": time.October,
	"nov": time.November,
	"dec": time.December,
	// Add more month names as needed
}

type Lexer struct {
	result  timeDateInfo
	scanner *bufio.Scanner
	tz      *timezone.Timezone
}

func NewLexer(input string) *Lexer {
	scanner := bufio.NewScanner(strings.NewReader(input))
	tz := timezone.New()
	scanner.Split(customSplit)
	return &Lexer{scanner: scanner, tz: tz}
}

// enable/disable this as needed
func dbg(args ...interface{}) {
	//fmt.Println(args...)
}

func customSplit(data []byte, atEOF bool) (advance int, token []byte, err error) {

	// Skip leading spaces or commas.
	start := 0
	for ; start < len(data); start++ {
		if !unicode.IsSpace(rune(data[start])) && data[start] != ',' {
			break
		}
	}
	// Scan until space, comma, or symbol, marking end of word.
	// If we see a letter, consume as a symbol.
	if start >= len(data) {
		// Request more data.
		return start, nil, nil
	}
	if unicode.IsLetter(rune(data[start])) {
		for j := start + 1; j < len(data); j++ {
			if !unicode.IsLetter(rune(data[j])) {
				dbg(j, data[start:j])
				return j, data[start:j], nil
			}
		}
	} else if unicode.IsDigit(rune(data[start])) {
		// If we see a digit, consume as a number.
		for j := start + 1; j < len(data); j++ {
			if !unicode.IsDigit(rune(data[j])) {
				dbg(j, data[start:j])
				return j, data[start:j], nil
			}
		}
	} else if data[start] == '=' && data[start+1] == '?' {
		if i := bytes.Index(data[start+2:], []byte("?=")); i >= 0 {
			j := start + i + 4
			return j, data[start:j], nil
		}
	} else {
		// Otherwise, consume as a single rune.
		dbg(start+1, data[start])
		return start + 1, data[start : start+1], nil
	}
	// Return the remaining bytes if we're at EOF.
	if atEOF && len(data) > start {
		return len(data), data[start:], nil
	}

	// Request more data.
	return start, nil, nil
}

func (l *Lexer) Lex(lval *yaccDateSymType) int {
	var err error
	if !l.scanner.Scan() {
		return 0
	}
	token := l.scanner.Text()
	le := len(token)

	// Check for one or two digit integer numbers
	if le <= 2 && unicode.IsDigit(rune(token[0])) && (le == 1 || unicode.IsDigit(rune(token[1]))) {
		lval.ival, err = strconv.Atoi(token)
		if err != nil {
			dbg("UNKNOWN")
			return UNKNOWN
		}
		dbg("NUM2", lval.ival)
		return NUM2
	}

	// Check for four digit integers
	if len(token) == 4 && unicode.IsDigit(rune(token[0])) && unicode.IsDigit(rune(token[1])) && unicode.IsDigit(rune(token[2])) && unicode.IsDigit(rune(token[3])) {
		lval.ival, err = strconv.Atoi(token)
		if err != nil {
			dbg("UNKNOWN")
			return UNKNOWN
		}
		dbg("NUM4", lval.ival)
		return NUM4
	}

	if len(token) >= 4 && token[0] == '=' {
		lval.tdi.tz3 = token
		dbg("MIME: ", token)
		return MIME
	}

	// Check for week days
	if day, ok := weekDays[strings.ToLower(token)]; ok {
		lval.ival = day
		dbg("WEEKDAY", lval.ival)
		return WEEKDAY
	}

	// Check for month names
	if month, ok := monthNames[strings.ToLower(token)]; ok {
		lval.ival = int(month)
		dbg("MONTH", lval.ival)
		return MONTH
	}

	// Check for time zones
	// we don't calculate it ourselves because its offset may depend on the date (daylight saving time)
	tzAbbrInfos, _ := l.tz.GetTzAbbreviationInfo(strings.ToUpper(token))
	if len(tzAbbrInfos) > 0 {
		lval.tdi.tz = tzAbbrInfos
		lval.tdi.tz3 = token
		dbg("TZ: ", token)
		if len(tzAbbrInfos) == 1 {
			lval.tdi.offset = tzAbbrInfos[0].Offset()
			if lval.tdi.offset == 0 {
				return TIMEZONE0
			} else {
				return TIMEZONE
			}
		}
		return TIMEZONE
	}

	// Return other symbols as individual tokens
	if len(token) == 1 {
		switch r := rune(token[0]); r {
		case '+', '-', ':', '(', ')', '/', '=':
			dbg(token)
			return int(r)
		default:
			//
		}
	}
	dbg("No TZ: ", token)
	return UNKNOWN
}

func (l *Lexer) Error(e string) {
	fmt.Printf("Error: %s\n", e)
}

func FlexDateToTime(dateStr string) (time.Time, error) {
	var myZone *time.Location
	lexer := NewLexer(dateStr)
	if yaccDateParse(lexer) == 1 {
		return time.Time{}, errors.New("Cannot parse date")
	}
	if lexer.result.tz == nil {
		// No TZ given. The code below covers both offset given and no offset
		// Due to default initialization of  0 for lexer.result.offset
		myZone = time.FixedZone("UTC", lexer.result.offset)
	} else if !lexer.result.offset_1st { // offset last, we base on timezone
		if len(lexer.result.tz) > 1 {
			// timezone 1st, we plan to rely on it
			// but with more than one timezone matches, we don;t know which
			return time.Time{}, errors.New("Ambiguous timezones and no explicit offset")
		} else if len(lexer.result.tz) == 1 {
			// unambiguous timezone 1st, so we rely on it.
			// If there is an additional +/-offset, we'll add it
			myZone = time.FixedZone(lexer.result.tz3, lexer.result.tz[0].Offset()+lexer.result.offset)
			dbg(lexer.result.tz3)
		}
	} else { // offset 1st, we base on offset and annotate with timezone
		if len(lexer.result.tz) > 0 {
			// toffset given as well as multiple time zones.
			// we are OK if any of those matches the offset
			for _, tz := range lexer.result.tz {
				dbg(tz.Name())
				if lexer.result.offset == tz.Offset() {
					//myZone = time.FixedZone(tz.Name(), tz.Offset())
					myZone = time.FixedZone(lexer.result.tz3, tz.Offset())
					break
				}
			}
			if myZone == nil {
				return time.Time{}, errors.New("Timezone contradicts explicit offset given")
			}
		}
	}
	return time.Date(lexer.result.year, time.Month(lexer.result.month), lexer.result.day, lexer.result.hour, lexer.result.min, lexer.result.sec, 0, myZone), nil
}

//line yacctab:1
var yaccDateExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 10,
	17, 32,
	-2, 29,
}

const yaccDatePrivate = 57344

const yaccDateLast = 71

var yaccDateAct = [...]int8{
	8, 12, 9, 26, 15, 16, 18, 19, 18, 19,
	44, 17, 48, 15, 16, 31, 24, 52, 50, 43,
	29, 28, 53, 42, 27, 36, 49, 39, 37, 38,
	25, 18, 19, 34, 35, 13, 41, 45, 34, 35,
	28, 40, 11, 27, 10, 11, 6, 58, 30, 55,
	56, 54, 32, 33, 10, 11, 5, 51, 47, 23,
	4, 20, 14, 22, 46, 57, 21, 7, 3, 2,
	1,
}

var yaccDatePact = [...]int16{
	40, -1000, -1000, -4, 50, -1000, -1000, 55, -1, 17,
	-1000, -1000, 5, 19, 48, -1000, -1000, 30, -1000, -1000,
	-1000, -1000, 11, -1000, 36, 36, 37, -1000, -1000, 25,
	-1000, -1000, 9, -1000, 3, -6, 54, -5, 13, -1000,
	-1000, 2, 53, -1000, -1000, 1, 8, -1000, 45, 37,
	-1000, -1000, -1000, 43, -1000, -1000, -1000, -1000, -1000,
}

var yaccDatePgo = [...]int8{
	0, 70, 69, 68, 56, 67, 66, 35, 0, 3,
	2, 65, 64, 63, 62, 1, 60,
}

var yaccDateR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 3, 3,
	4, 7, 7, 7, 7, 7, 15, 15, 15, 14,
	14, 16, 6, 13, 12, 11, 5, 5, 5, 10,
	9, 9, 8, 8,
}

var yaccDateR2 = [...]int8{
	0, 1, 5, 3, 2, 3, 2, 1, 2, 1,
	2, 1, 1, 3, 3, 4, 2, 2, 4, 1,
	1, 1, 5, 1, 1, 1, 5, 5, 3, 1,
	1, 1, 1, 1,
}

var yaccDateChk = [...]int16{
	-1000, -1, -2, -3, -16, -4, 6, -5, -8, -10,
	4, 5, -15, -7, -14, 8, 9, 15, 12, 13,
	-4, -6, -13, 4, 17, 13, -9, 7, 4, 15,
	-7, -15, 4, 5, 8, 9, 14, -9, -9, -8,
	4, 11, 14, 16, 16, -15, -12, 4, 17, 13,
	16, 4, 16, 14, -10, 4, -8, -11, 4,
}

var yaccDateDef = [...]int8{
	0, -2, 1, 7, 0, 9, 21, 0, 0, 0,
	-2, 33, 4, 6, 0, 11, 12, 0, 19, 20,
	8, 10, 0, 23, 0, 0, 0, 30, 31, 0,
	3, 5, 16, 17, 0, 0, 0, 0, 0, 28,
	32, 0, 0, 13, 14, 0, 0, 24, 0, 0,
	2, 18, 15, 0, 26, 29, 27, 22, 25,
}

var yaccDateTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	15, 16, 3, 12, 3, 13, 3, 17, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 14, 3,
	3, 18,
}

var yaccDateTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
}

var yaccDateTok3 = [...]int8{
	0,
}

var yaccDateErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yaccDateDebug        = 0
	yaccDateErrorVerbose = false
)

type yaccDateLexer interface {
	Lex(lval *yaccDateSymType) int
	Error(s string)
}

type yaccDateParser interface {
	Parse(yaccDateLexer) int
	Lookahead() int
}

type yaccDateParserImpl struct {
	lval  yaccDateSymType
	stack [yaccDateInitialStackSize]yaccDateSymType
	char  int
}

func (p *yaccDateParserImpl) Lookahead() int {
	return p.char
}

func yaccDateNewParser() yaccDateParser {
	return &yaccDateParserImpl{}
}

const yaccDateFlag = -1000

func yaccDateTokname(c int) string {
	if c >= 1 && c-1 < len(yaccDateToknames) {
		if yaccDateToknames[c-1] != "" {
			return yaccDateToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yaccDateStatname(s int) string {
	if s >= 0 && s < len(yaccDateStatenames) {
		if yaccDateStatenames[s] != "" {
			return yaccDateStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yaccDateErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yaccDateErrorVerbose {
		return "syntax error"
	}

	for _, e := range yaccDateErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yaccDateTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yaccDatePact[state])
	for tok := TOKSTART; tok-1 < len(yaccDateToknames); tok++ {
		if n := base + tok; n >= 0 && n < yaccDateLast && int(yaccDateChk[int(yaccDateAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yaccDateDef[state] == -2 {
		i := 0
		for yaccDateExca[i] != -1 || int(yaccDateExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yaccDateExca[i] >= 0; i += 2 {
			tok := int(yaccDateExca[i])
			if tok < TOKSTART || yaccDateExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yaccDateExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yaccDateTokname(tok)
	}
	return res
}

func yaccDatelex1(lex yaccDateLexer, lval *yaccDateSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yaccDateTok1[0])
		goto out
	}
	if char < len(yaccDateTok1) {
		token = int(yaccDateTok1[char])
		goto out
	}
	if char >= yaccDatePrivate {
		if char < yaccDatePrivate+len(yaccDateTok2) {
			token = int(yaccDateTok2[char-yaccDatePrivate])
			goto out
		}
	}
	for i := 0; i < len(yaccDateTok3); i += 2 {
		token = int(yaccDateTok3[i+0])
		if token == char {
			token = int(yaccDateTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yaccDateTok2[1]) /* unknown char */
	}
	if yaccDateDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yaccDateTokname(token), uint(char))
	}
	return char, token
}

func yaccDateParse(yaccDatelex yaccDateLexer) int {
	return yaccDateNewParser().Parse(yaccDatelex)
}

func (yaccDatercvr *yaccDateParserImpl) Parse(yaccDatelex yaccDateLexer) int {
	var yaccDaten int
	var yaccDateVAL yaccDateSymType
	var yaccDateDollar []yaccDateSymType
	_ = yaccDateDollar // silence set and not used
	yaccDateS := yaccDatercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yaccDatestate := 0
	yaccDatercvr.char = -1
	yaccDatetoken := -1 // yaccDatercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yaccDatestate = -1
		yaccDatercvr.char = -1
		yaccDatetoken = -1
	}()
	yaccDatep := -1
	goto yaccDatestack

ret0:
	return 0

ret1:
	return 1

yaccDatestack:
	/* put a state and value onto the stack */
	if yaccDateDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yaccDateTokname(yaccDatetoken), yaccDateStatname(yaccDatestate))
	}

	yaccDatep++
	if yaccDatep >= len(yaccDateS) {
		nyys := make([]yaccDateSymType, len(yaccDateS)*2)
		copy(nyys, yaccDateS)
		yaccDateS = nyys
	}
	yaccDateS[yaccDatep] = yaccDateVAL
	yaccDateS[yaccDatep].yys = yaccDatestate

yaccDatenewstate:
	yaccDaten = int(yaccDatePact[yaccDatestate])
	if yaccDaten <= yaccDateFlag {
		goto yaccDatedefault /* simple state */
	}
	if yaccDatercvr.char < 0 {
		yaccDatercvr.char, yaccDatetoken = yaccDatelex1(yaccDatelex, &yaccDatercvr.lval)
	}
	yaccDaten += yaccDatetoken
	if yaccDaten < 0 || yaccDaten >= yaccDateLast {
		goto yaccDatedefault
	}
	yaccDaten = int(yaccDateAct[yaccDaten])
	if int(yaccDateChk[yaccDaten]) == yaccDatetoken { /* valid shift */
		yaccDatercvr.char = -1
		yaccDatetoken = -1
		yaccDateVAL = yaccDatercvr.lval
		yaccDatestate = yaccDaten
		if Errflag > 0 {
			Errflag--
		}
		goto yaccDatestack
	}

yaccDatedefault:
	/* default state action */
	yaccDaten = int(yaccDateDef[yaccDatestate])
	if yaccDaten == -2 {
		if yaccDatercvr.char < 0 {
			yaccDatercvr.char, yaccDatetoken = yaccDatelex1(yaccDatelex, &yaccDatercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yaccDateExca[xi+0] == -1 && int(yaccDateExca[xi+1]) == yaccDatestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yaccDaten = int(yaccDateExca[xi+0])
			if yaccDaten < 0 || yaccDaten == yaccDatetoken {
				break
			}
		}
		yaccDaten = int(yaccDateExca[xi+1])
		if yaccDaten < 0 {
			goto ret0
		}
	}
	if yaccDaten == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yaccDatelex.Error(yaccDateErrorMessage(yaccDatestate, yaccDatetoken))
			Nerrs++
			if yaccDateDebug >= 1 {
				__yyfmt__.Printf("%s", yaccDateStatname(yaccDatestate))
				__yyfmt__.Printf(" saw %s\n", yaccDateTokname(yaccDatetoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yaccDatep >= 0 {
				yaccDaten = int(yaccDatePact[yaccDateS[yaccDatep].yys]) + yaccDateErrCode
				if yaccDaten >= 0 && yaccDaten < yaccDateLast {
					yaccDatestate = int(yaccDateAct[yaccDaten]) /* simulate a shift of "error" */
					if int(yaccDateChk[yaccDatestate]) == yaccDateErrCode {
						goto yaccDatestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yaccDateDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yaccDateS[yaccDatep].yys)
				}
				yaccDatep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yaccDateDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yaccDateTokname(yaccDatetoken))
			}
			if yaccDatetoken == yaccDateEofCode {
				goto ret1
			}
			yaccDatercvr.char = -1
			yaccDatetoken = -1
			goto yaccDatenewstate /* try again in the same state */
		}
	}

	/* reduction by production yaccDaten */
	if yaccDateDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yaccDaten, yaccDateStatname(yaccDatestate))
	}

	yaccDatent := yaccDaten
	yaccDatept := yaccDatep
	_ = yaccDatept // guard against "declared and not used"

	yaccDatep -= int(yaccDateR2[yaccDaten])
	// yaccDatep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yaccDatep+1 >= len(yaccDateS) {
		nyys := make([]yaccDateSymType, len(yaccDateS)*2)
		copy(nyys, yaccDateS)
		yaccDateS = nyys
	}
	yaccDateVAL = yaccDateS[yaccDatep+1]

	/* consult goto table to find next state */
	yaccDaten = int(yaccDateR1[yaccDaten])
	yaccDateg := int(yaccDatePgo[yaccDaten])
	yaccDatej := yaccDateg + yaccDateS[yaccDatep].yys + 1

	if yaccDatej >= yaccDateLast {
		yaccDatestate = int(yaccDateAct[yaccDateg])
	} else {
		yaccDatestate = int(yaccDateAct[yaccDatej])
		if int(yaccDateChk[yaccDatestate]) != -yaccDaten {
			yaccDatestate = int(yaccDateAct[yaccDateg])
		}
	}
	// dummy call; replaced with literal code
	switch yaccDatent {

	case 1:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:61
		{
			yaccDatelex.(*Lexer).result = yaccDateVAL.tdi
		}
	case 2:
		yaccDateDollar = yaccDateS[yaccDatept-5 : yaccDatept+1]
//line yaccDate.y:67
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
			yaccDateVAL.tdi.offset = yaccDateDollar[2].ival
			yaccDateVAL.tdi.mime = yaccDateDollar[4].tdi.mime
			yaccDateVAL.tdi.offset_1st = true
		}
	case 3:
		yaccDateDollar = yaccDateS[yaccDatept-3 : yaccDatept+1]
//line yaccDate.y:74
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
			yaccDateVAL.tdi.offset = yaccDateDollar[2].ival
			yaccDateVAL.tdi.tz = yaccDateDollar[3].tdi.tz
			yaccDateVAL.tdi.tz3 = yaccDateDollar[3].tdi.tz3
			yaccDateVAL.tdi.offset_1st = true
		}
	case 4:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:82
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
			yaccDateVAL.tdi.offset = yaccDateDollar[2].ival
			yaccDateVAL.tdi.offset_1st = true
		}
	case 5:
		yaccDateDollar = yaccDateS[yaccDatept-3 : yaccDatept+1]
//line yaccDate.y:88
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
			yaccDateVAL.tdi.tz = yaccDateDollar[2].tdi.tz
			yaccDateVAL.tdi.tz3 = yaccDateDollar[2].tdi.tz3
			yaccDateVAL.tdi.offset = yaccDateDollar[3].ival
			yaccDateVAL.tdi.offset_1st = false
		}
	case 6:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:96
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
			yaccDateVAL.tdi.tz = yaccDateDollar[2].tdi.tz
			yaccDateVAL.tdi.tz3 = yaccDateDollar[2].tdi.tz3
		}
	case 7:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:101
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
		}
	case 8:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:104
		{
			yaccDateVAL.tdi = yaccDateDollar[2].tdi
		}
	case 9:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:105
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
		}
	case 10:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:109
		{
			yaccDateVAL.tdi.sec = yaccDateDollar[2].tdi.sec
			yaccDateVAL.tdi.min = yaccDateDollar[2].tdi.min
			yaccDateVAL.tdi.hour = yaccDateDollar[2].tdi.hour
			yaccDateVAL.tdi.day = yaccDateDollar[1].tdi.day
			yaccDateVAL.tdi.month = yaccDateDollar[1].tdi.month
			yaccDateVAL.tdi.year = yaccDateDollar[1].tdi.year
		}
	case 11:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:119
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
		}
	case 12:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:120
		{
			yaccDateVAL.tdi = yaccDateDollar[1].tdi
		}
	case 13:
		yaccDateDollar = yaccDateS[yaccDatept-3 : yaccDatept+1]
//line yaccDate.y:121
		{
			yaccDateVAL.tdi = yaccDateDollar[2].tdi
		}
	case 14:
		yaccDateDollar = yaccDateS[yaccDatept-3 : yaccDatept+1]
//line yaccDate.y:122
		{
			yaccDateVAL.tdi = yaccDateDollar[2].tdi
		}
	case 15:
		yaccDateDollar = yaccDateS[yaccDatept-4 : yaccDatept+1]
//line yaccDate.y:124
		{
			yaccDateVAL.tdi = yaccDateDollar[2].tdi
			yaccDateVAL.tdi.offset = yaccDateDollar[3].ival
		}
	case 16:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:130
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival * yaccDateDollar[2].ival * 3600
		}
	case 17:
		yaccDateDollar = yaccDateS[yaccDatept-2 : yaccDatept+1]
//line yaccDate.y:131
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival*((yaccDateDollar[2].ival/100)*3600) + (yaccDateDollar[2].ival%100)*60
		}
	case 18:
		yaccDateDollar = yaccDateS[yaccDatept-4 : yaccDatept+1]
//line yaccDate.y:132
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival * (yaccDateDollar[2].ival*3600 + yaccDateDollar[4].ival*60)
		}
	case 19:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:135
		{
			yaccDateVAL.ival = 1
		}
	case 20:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:136
		{
			yaccDateVAL.ival = -1
		}
	case 22:
		yaccDateDollar = yaccDateS[yaccDatept-5 : yaccDatept+1]
//line yaccDate.y:143
		{
			yaccDateVAL.tdi.sec = yaccDateDollar[5].ival
			yaccDateVAL.tdi.min = yaccDateDollar[3].ival
			yaccDateVAL.tdi.hour = yaccDateDollar[1].ival
		}
	case 23:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:150
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 24:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:151
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 25:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:152
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 26:
		yaccDateDollar = yaccDateS[yaccDatept-5 : yaccDatept+1]
//line yaccDate.y:156
		{
			yaccDateVAL.tdi.year = yaccDateDollar[1].ival
			yaccDateVAL.tdi.month = yaccDateDollar[3].ival
			yaccDateVAL.tdi.day = yaccDateDollar[5].ival
		}
	case 27:
		yaccDateDollar = yaccDateS[yaccDatept-5 : yaccDatept+1]
//line yaccDate.y:162
		{
			yaccDateVAL.tdi.year = yaccDateDollar[5].ival
			yaccDateVAL.tdi.month = yaccDateDollar[3].ival
			yaccDateVAL.tdi.day = yaccDateDollar[1].ival
		}
	case 28:
		yaccDateDollar = yaccDateS[yaccDatept-3 : yaccDatept+1]
//line yaccDate.y:168
		{
			yaccDateVAL.tdi.year = yaccDateDollar[3].ival
			yaccDateVAL.tdi.month = yaccDateDollar[2].ival
			yaccDateVAL.tdi.day = yaccDateDollar[1].ival
		}
	case 29:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:175
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 30:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:178
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 31:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:179
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 32:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:182
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	case 33:
		yaccDateDollar = yaccDateS[yaccDatept-1 : yaccDatept+1]
//line yaccDate.y:183
		{
			yaccDateVAL.ival = yaccDateDollar[1].ival
		}
	}
	goto yaccDatestack /* stack new state and value */
}
